name: Deploy application2
run-name: Deploy ${{ inputs.tag }} to ${{ inputs.destinationHubEnv }} from ${{ inputs.sourceHubEnv }}

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Provide image tag"
        required: true
        default: "latest"
        type: "string"
      branch:
        description: "Provide branch name"
        required: true
        default: "master"
        type: "string"
      sourceHubEnv:
        description: Select source hubEnv
        required: true
        type: choice
        options:
          - 'BACKEND_EMEA_TEST'
          - 'BACKEND_US_TEST'
      destinationHubEnv:
        description: Select destination hubEnv
        required: true
        type: choice
        options:
          - 'BACKEND_EMEA_TEST'
          - 'BACKEND_US_TEST'
      skipSmokeTests:
        description: Should skip smoke tests?
        type: boolean
        required: false
        default: false

jobs:
  sourceProperties:
    uses: ./.github/workflows/datacenterMap.yml
    with:
      hubEnv: ${{ inputs.sourceHubEnv }}
    secrets: inherit

  destinationProperties:
    needs: sourceProperties
    uses: ./.github/workflows/datacenterMap.yml
    with:
      hubEnv: ${{ inputs.destinationHubEnv }}
    secrets: inherit

  deploy:
    runs-on: ubuntu-latest
    needs: [ sourceProperties, destinationProperties ]
    env:
      SOURCE_AWS_ACCOUNT: ${{ needs.sourceProperties.outputs.AWS_ACCOUNT }}
      SOURCE_REGION: ${{ needs.sourceProperties.outputs.REGION }}
      DESTINATION_AWS_ACCOUNT: ${{ needs.destinationProperties.outputs.AWS_ACCOUNT }}
      DESTINATION_REGION: ${{ needs.destinationProperties.outputs.REGION }}
      DESTINATION_CLUSTER_NAME: ${{ needs.destinationProperties.outputs.CLUSTER_NAME }}
      DESTINATION_SERVICE_NAME: ${{ needs.destinationProperties.outputs.SERVICE_NAME }}
      DESTINATION_TASK_NAME: ${{ needs.destinationProperties.outputs.TASK_NAME }}
      SKIP_SMOKE_TESTS: ${{ (github.event.inputs.skipSmokeTests != null && github.event.inputs.skipSmokeTests == 'true') || 'false' }}
      SOURCE_AWS_KEY:  ${{ secrets[format('{0}_AWS_KEY', github.event.inputs.sourceHubEnv)] }}
      SOURCE_AWS_SECRET: ${{ secrets[format('{0}_AWS_SECRET', github.event.inputs.sourceHubEnv)] }}
      DESTINATION_AWS_KEY: ${{ secrets[format('{0}_AWS_KEY', github.event.inputs.destinationHubEnv)] }}
      DESTINATION_AWS_SECRET: ${{ secrets[format('{0}_AWS_SECRET', github.event.inputs.destinationHubEnv)] }}
      SMOKETEST_BACKEND_PASSWORD: ${{ secrets[format('{0}_SMOKETEST_BACKEND_PASSWORD', github.event.inputs.destinationHubEnv)] }}

    steps:
      - name: Display info about the current deployment # in GitHub 3.8 can be replaced by run-name...
        run: |
          echo "### Deploying image ${{ inputs.tag }} from ${{ inputs.sourceHubEnv }} to ${{ inputs.destinationHubEnv }}" >> $GITHUB_STEP_SUMMARY

      - name: Clean up working directory
        run: |
          rm -rf * .*extracted*

      - name: Configure source AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.SOURCE_AWS_KEY }}
          aws-secret-access-key: ${{ env.SOURCE_AWS_SECRET }}
          aws-region: ${{ env.SOURCE_REGION }}

      - name: Login to source Amazon ECR
        id: login-source-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull image from source Amazon ECR
        env:
          SOURCE_ECR_REGISTRY: ${{ steps.login-source-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
          IMAGE_TAG: ${{ github.event.inputs.tag }}
        run: |
          docker pull $SOURCE_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $SOURCE_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:temp

      - name: Extract task definition from Docker image
        uses: shrink/actions-docker-extract@v2
        with:
          image: "backend:temp"
          path: "/backend/fargate/${{ github.event.inputs.destinationHubEnv }}/task.json"

      - name: Copy task definition to the working directory
        run: |
          find . -name task.json -exec cp "{}" . \;

      - name: Configure destination AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.DESTINATION_AWS_KEY }}
          aws-secret-access-key: ${{ env.DESTINATION_AWS_SECRET }}
          aws-region: ${{ env.DESTINATION_REGION }}

      - name: Login to destination Amazon ECR
        id: login-destination-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to destination Amazon ECR
        env:
          DESTINATION_ECR_REGISTRY: ${{ steps.login-destination-ecr.outputs.registry }}
          ECR_REPOSITORY: backend
          IMAGE_TAG: ${{ github.event.inputs.tag }}
        run: |
          docker tag $ECR_REPOSITORY:temp $DESTINATION_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REPOSITORY:temp $DESTINATION_ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $DESTINATION_ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $DESTINATION_ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task.json
          service: ${{ env.DESTINATION_SERVICE_NAME }}
          cluster: ${{ env.DESTINATION_CLUSTER_NAME }}
          wait-for-service-stability: true

      #  perform tests:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: JDK 17 setup
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Maven setup
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.2

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %T')"

      - name: Run smoke tests
        if: ${{ env.SKIP_SMOKE_TESTS == 'false' }}
        run: |
          mvn -f pom.xml clean test -P st,${{ github.event.inputs.destinationHubEnv }}

      - name: Smoke tests report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Smoke tests report ${{ steps.date.outputs.date }}
          files: |
            **/surefire-reports/TEST-*.xml

      - name: Clean up test report
        if: always()
        run: |
          mvn clean
